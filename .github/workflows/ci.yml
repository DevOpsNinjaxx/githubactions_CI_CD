name: Contionuous_Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Update npm
        run: npm install -g npm@latest

      - name: Install dependencies
        run: npm install

  lint:
    needs: build
    runs-on: ubuntu-latest  
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run Lint
        run: npm run lint

  test:
    needs: build
    runs-on: ubuntu-latest  
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        run: npm run test

  audit_check:
    needs: [lint, test]
    runs-on: ubuntu-latest  
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Fix dependency vulnerabilities
        run: npm audit fix

  #deploy_infrastructure:
  #  runs-on: ubuntu-latest
  #  needs: audit_check
#
  #  defaults:
  #    run:
  #      working-directory: infrastructure/web
#
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
#
  #    - name: Set up AWS CLI
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: us-east-2
#
  #    - name: Set up Terraform
  #      uses: hashicorp/setup-terraform@v1
#
  #    - name: Initialize Terraform
  #      run: terraform init
#
  #    - name: Plan infrastructure changes
  #      run: terraform plan -out=tfplan
#
  #    - name: Apply infrastructure changes
  #      run: terraform apply tfplan
#
  #copy_code:
  #  runs-on: ubuntu-latest
  #  needs: deploy_infrastructure
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
#
  #    - name: Set up AWS CLI
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: us-east-2  
#
  #    - name: Get EC2 Instance IP and save as HOST
  #      run: |
  #        # Fetch the public IP address of the EC2 instance based on its tag name
  #        EC2_INSTANCE_IP=$(aws ec2 describe-instances \
  #                            --filters "Name=tag:Name,Values=development-instance" \
  #                            --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #                            --output text)
#
  #        # Set the retrieved IP address as the HOST environment variable
  #        echo "HOST=${EC2_INSTANCE_IP}" >> $GITHUB_ENV
#
  #    - name: Copy to EC2
  #      uses: easingthemes/ssh-deploy@v2
  #      with:
  #        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #        REMOTE_HOST: ${{ env.HOST }}
  #        REMOTE_USER: ubuntu
  #        source: ./
  #        target: ~/app  
#
  #setup_ansible:
  #  runs-on: ubuntu-latest
  #  needs: deploy_infrastructure
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
#
  #    - name: Set up AWS CLI
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: us-east-2
#
  #    - name: Get EC2 Instance Public IP by Tag Name
  #      run: |
  #        # Fetch the public IP address of the EC2 instance based on its tag name
  #        aws ec2 describe-instances \
  #          --filters "Name=tag:Name,Values=development-instance" \
  #          --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #          --output text >> inventory
  #        cat inventory
#
  #    - name: Cache Ansible inventory
  #      uses: actions/cache@v2
  #      with:
  #        path: inventory
  #        key: ansible-inventory-${{ hashFiles('inventory') }}
#
  #    - name: Persist Ansible inventory to artifacts
  #      uses: actions/upload-artifact@v3
  #      with:
  #        name: inventory
  #        path: inventory
#
  #run-ansible:
  #  runs-on: ubuntu-latest
  #  needs: [setup_ansible, copy_code]
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4 
 #
  #    - name: get ssh key
  #      uses: webfactory/ssh-agent@v0.6.0
  #      with:
  #          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
  #    
  #    - name: Install dependencies
  #      run: sudo apt-get install ansible
#
  #    - name: Attach workspace
  #      uses: actions/download-artifact@v3
  #      with:
  #        name: inventory
#
  #    - name: run ansible playbook
  #      run: ansible-playbook -i inventory configure.yml
#
  #      
      